name: "Run Terraform"

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string

env:
  TF_LOG: INFO
  FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BACKEND_ROLE_ARN: ${{ secrets.BACKEND_ROLE_ARN }}
  BACKEND_BUCKET: ${{ secrets.BACKEND_BUCKET }}
  BACKEND_DYNAMO_DB: ${{ secrets.BACKEND_DYNAMODB_TABLE }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell
    # Set the working directory according to the input passed from the caller workflow
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.9

      # Run a terraform fmt
      - name: terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      # Initialize a new or existing Terraform working directory
      - name: terraform init
        id: init
        run: >
          terraform init
          -backend-config="role_arn=$BACKEND_ROLE_ARN"
          -backend-config="bucket=$BACKEND_BUCKET"
          -backend-config="dynamodb_table=$BACKEND_DYNAMODB_TABLE"

      # Run a terraform validate
      - name: terraform validate
        id: validate
        run: terraform validate -no-color

      # Run a terraform plan for pull requests and workflow_dispatch to a non-main branch
      - name: terraform plan
        id: plan
        if: github.event_name == 'pull_request' || (github.ref != 'refs/heads/main' && github.event_name == 'workflow_dispatch')
        run: terraform plan -no-color

      # Add a comment to pull requests with plan results
      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # On push/workflow_dispatch to main, build or change infrastructure according to Terraform configuration files
      - name: terraform apply
        if: github.event_name == 'push' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve
